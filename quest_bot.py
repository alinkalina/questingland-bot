import telebot
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, InputFile
from quest_bot_game import menu_generation, send_next_question
from quest_bot_info import users, names_list, get_dict
from hidden_file import my_id, token
import shelve


bot = telebot.TeleBot(token)


def check_game_name(message):
    return message.text in names_list()


def check_start(message):
    return message.text == 'üéÆ –ò–≥—Ä–∞—Ç—å'


def check_answer(message):
    user_id = message.chat.id
    return message.text in users[user_id]['current_level']['variants'].keys()


@bot.message_handler(commands=['start'])
def send_start_message(message):
    if message.chat.id not in users.keys():
        users[message.chat.id] = {}
        users[message.chat.id]['results'] = {}
        for name in names_list():
            users[message.chat.id]['results'][name] = {'attempts': 0,
                                                       'win': 0}
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üñêÔ∏è –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ /menu –∏ –æ–∫—É–Ω–∏—Å—å –≤ –º–∏—Ä –∑–∞–≥–∞–¥–æ–∫ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π!',
                     reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['help'])
def send_help_message(message):
    bot.send_message(message.chat.id, '/start - –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üñêÔ∏è\n'
                                      '/help - –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥–∞—Ö, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Å–µ–π—á–∞—Å —á–∏—Ç–∞–µ—à—å üìñ\n'
                                      '/menu - –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üßê\n'
                                      '/again - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ üîÑ\n'
                                      '/mystatistics - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è üìä\n'
                                      '/support - –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ–ø—Ä–∞–≤–∏—Ç—å '
                                      '–æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ ‚öô\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –±–æ—Ç —Å—Ä–∞–∑—É –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (–º–∞–ª–æ –ª–∏ —á—Ç–æ üôÉ), '
                                      '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –Ω–µ –ø—É—Ç–∞–π –µ–≥–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–π',
                     reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['menu'])
def send_menu(message):
    if message.chat.id not in users.keys():
        users[message.chat.id] = {}
        users[message.chat.id]['results'] = {}
        for name in names_list():
            users[message.chat.id]['results'][name] = {'attempts': 0,
                                                       'win': 0}
    users[message.chat.id]['current_game'] = {}
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É', reply_markup=menu_generation())


@bot.message_handler(commands=['again'])
def start_again(message):
    try:
        users[message.chat.id]['current_level'] = users[message.chat.id]['current_game']['game']
        users[message.chat.id]['results'][users[message.chat.id]['current_game']['name']]['attempts'] += 1
        bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! üî•')
        send_next_question(message, bot)
    except KeyError:
        bot.send_message(message.chat.id, '‚ùó –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–∑ /menu, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
                         reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['mystatistics'])
def send_statistics(message):
    if message.chat.id not in users.keys():
        users[message.chat.id] = {}
        users[message.chat.id]['results'] = {}
        for name in names_list():
            users[message.chat.id]['results'][name] = {'attempts': 0,
                                                       'win': 0}
    s = '*–¢–≤–æ–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:*\n'
    for game in users[message.chat.id]['results'].keys():
        s += f"\n{game}\n–ü–æ–ø—ã—Ç–æ–∫: {users[message.chat.id]['results'][game]['attempts']}\n–ü–æ–±–µ–¥: " \
             f"{users[message.chat.id]['results'][game]['win']}\n"
    bot.send_message(message.chat.id, s, parse_mode='Markdown', reply_markup=ReplyKeyboardRemove())


@bot.message_handler(commands=['support'])
def send_support(message):
    def get_feedback(feedback):
        if not feedback.text.startswith('/'):
            bot.send_message(my_id, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{feedback.from_user.username} –Ω–∞–ø–∏—Å–∞–ª_–∞ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É!\n\n'
                                    f'{feedback.text}')
            bot.send_message(message.chat.id, '–°–ø–∞—Å–∏–±–æ! –¢–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ü©µ')

    msg = bot.send_message(message.chat.id, '–û–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–ª–∏ –æ—Å—Ç–∞–≤—å –æ—Ç–∑—ã–≤ (–º—ã —Ç–∞–∫–∂–µ '
                                            '—Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–æ –ø–æ–≤–æ–¥—É –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞, —Å—é–∂–µ—Ç–æ–≤ –∏–≥—Ä –∏ —Ç. –¥.)',
                           reply_markup=ReplyKeyboardRemove())
    bot.register_next_step_handler(msg, get_feedback)


@bot.message_handler(func=check_game_name)
def game_name_choosen(message):
    game = get_dict(message.text)
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(KeyboardButton(text='üéÆ –ò–≥—Ä–∞—Ç—å'))
    users[message.chat.id]['current_game'] = game
    users[message.chat.id]['current_level'] = game['game']
    try:
        with open(game['description-photo'], 'rb') as file:
            bot.send_photo(message.chat.id, InputFile(file))
        file.close()
    except FileNotFoundError:
        bot.send_message(message.chat.id, '_–ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å —Ñ–æ—Ç–æ, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–Ω–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å üò¢_',
                         parse_mode='Markdown')
    bot.send_message(message.chat.id, f"*{game['name']}*\n{game['description']}", parse_mode='Markdown',
                     reply_markup=markup)


@bot.message_handler(func=check_start)
def start_game(message):
    users[message.chat.id]['results'][users[message.chat.id]['current_game']['name']]['attempts'] += 1
    bot.send_message(message.chat.id, '–ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É! üî•')
    send_next_question(message, bot)


@bot.message_handler(func=check_answer)
def next_question(message):
    users[message.chat.id]['current_level'] = users[message.chat.id]['current_level']['variants'][message.text]
    send_next_question(message, bot)


@bot.message_handler(content_types=['text'])
def send_error_text_message(message):
    bot.send_message(message.chat.id, '‚õî –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—â–∞–π—Å—è —Å –±–æ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥')


@bot.message_handler(content_types=['photo', 'audio', 'video', 'document', 'sticker', 'voice'])
def send_error_type_message(message):
    bot.send_message(message.chat.id, 'üö´ –ü—Ä–æ—Å—Ç–∏, –±–æ—Ç —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö')


bot.polling()

with shelve.open('users.mdb') as db:
    db['users'] = users
